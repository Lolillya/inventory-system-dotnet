// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Data;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20250916130412_FixedInventorySeeders")]
    partial class FixedInventorySeeders
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        },
                        new
                        {
                            Id = "3",
                            Name = "Supplier",
                            NormalizedName = "SUPPLIER"
                        },
                        new
                        {
                            Id = "4",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "3",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "4",
                            RoleId = "4"
                        },
                        new
                        {
                            UserId = "a7f1f87f-8150-4c86-bef3-3b6f5b497c0b",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "56e2e671-7353-4bce-950b-b76d74915f0f",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "5cc99ded-fe07-4bbb-a761-4a6025891f9f",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "2813ffb1-e876-4183-9621-480f02708712",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "f542b6c8-24f1-4dbe-8a1c-05866a020016",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "31f025f2-60a3-4a15-8b3d-5e929e1f12f4",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "eba6a85d-944e-42af-b963-1a22b2c66bfc",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "acef761f-019a-4ca2-982a-d8e7dee767ed",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "e4f938e4-e3fc-4fe3-94d4-4a664de76e0d",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "fd9249ce-169c-457f-8513-7ada0ac1683b",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "be61d1f3-dfc4-4c60-bbc2-0136ae5cfb5c",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "64bc2df7-a283-40c6-aa76-cc79d5d2378a",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "e1615701-0602-4f0b-8815-c486c5e5fde0",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "4b33af44-e3f4-449c-becf-76dcc3b0f110",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "dd83701a-3664-44a0-b813-85d5e80532da",
                            RoleId = "3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("backend.Models.Inventory.Brand", b =>
                {
                    b.Property<int>("Brand_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Brand_ID"));

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Brand_ID");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Brand_ID = 1,
                            BrandName = "Pilot",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("backend.Models.Inventory.Category", b =>
                {
                    b.Property<int>("Category_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Category_ID"));

                    b.Property<string>("Category_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Category_ID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Category_ID = 1,
                            Category_Name = "Writing Instruments",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("backend.Models.Inventory.Inventory", b =>
                {
                    b.Property<int>("Inventory_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Inventory_ID"));

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("Inventory_Clerk")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Inventory_Number")
                        .HasColumnType("int");

                    b.Property<int>("Total_Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("Updated_At")
                        .HasColumnType("datetime2");

                    b.Property<int>("Variant_ID")
                        .HasColumnType("int");

                    b.HasKey("Inventory_ID");

                    b.ToTable("Inventories");

                    b.HasData(
                        new
                        {
                            Inventory_ID = 1,
                            Created_At = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Inventory_Clerk = "",
                            Inventory_Number = 0,
                            Total_Quantity = 0,
                            Updated_At = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Variant_ID = 1
                        });
                });

            modelBuilder.Entity("backend.Models.Inventory.Product", b =>
                {
                    b.Property<int>("Product_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Product_ID"));

                    b.Property<int>("Brand_ID")
                        .HasColumnType("int");

                    b.Property<int>("Category_ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Product_Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Product_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Variant_ID")
                        .HasColumnType("int");

                    b.HasKey("Product_ID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Product_ID = 1,
                            Brand_ID = 1,
                            Category_ID = 1,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Smooth writing gel ink pen",
                            Product_Code = "PILOT-G2-07-BLK",
                            Product_Name = "Pilot G2 0.7 Gel Pen - Black",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Variant_ID = 1
                        });
                });

            modelBuilder.Entity("backend.Models.Inventory.Variant", b =>
                {
                    b.Property<int>("Variant_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Variant_ID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Product_ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Variant_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Variant_ID");

                    b.ToTable("Variants");

                    b.HasData(
                        new
                        {
                            Variant_ID = 1,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Product_ID = 1,
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Variant_Name = "Single Pack"
                        });
                });

            modelBuilder.Entity("backend.Models.PersonalDetails", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            CompanyName = "Prince Educational Supply",
                            ConcurrencyStamp = "8d5e6f7a-1b2c-3d4e-5f6a-7b8c9d0e1f2a",
                            Email = "admin@prince.edu",
                            EmailConfirmed = true,
                            FirstName = "System",
                            LastName = "Administrator",
                            LockoutEnabled = true,
                            NormalizedEmail = "ADMIN@PRINCE.EDU",
                            NormalizedUserName = "ADMIN",
                            Notes = "System Administrator Account",
                            PasswordHash = "$2a$12$jp5zIIJOL8xuwDJ8iFQ71eCo8SkyYUe.EzycyKo9x8avU63OE./DK",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7c4c8c0a-9b3a-4e5f-9d1c-1a2b3c4d5e6f",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            CompanyName = "Prince Educational Supply",
                            ConcurrencyStamp = "0e1f2a3b-4c5d-6e7f-8a9b-0c1d2e3f4a5b",
                            Email = "employee@prince.edu",
                            EmailConfirmed = true,
                            FirstName = "John",
                            LastName = "Doe",
                            LockoutEnabled = true,
                            NormalizedEmail = "EMPLOYEE@PRINCE.EDU",
                            NormalizedUserName = "EMPLOYEE",
                            Notes = "Inventory Manager",
                            PasswordHash = "$2a$12$ftZOEZ3bCuHwb8sY3q4TK.9842WEhzdptOPQdDGYnfyFt0Wr.Fhbi",
                            PhoneNumber = "2345678901",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9d0e1f2a-3b4c-5d6e-7f8a-9b0c1d2e3f4a",
                            TwoFactorEnabled = false,
                            UserName = "employee"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            CompanyName = "Educational Supplies Inc.",
                            ConcurrencyStamp = "2a3b4c5d-6e7f-8a9b-0c1d-2e3f4a5b6c7d",
                            Email = "supplier@example.com",
                            EmailConfirmed = true,
                            FirstName = "Jane",
                            LastName = "Smith",
                            LockoutEnabled = true,
                            NormalizedEmail = "SUPPLIER@EXAMPLE.COM",
                            NormalizedUserName = "SUPPLIER",
                            Notes = "Main supplier of stationery",
                            PasswordHash = "$2a$12$ycj3WiWbM50s0umHkb3ZmuX9BHbrfhmZm8Ps58grA/E2GdF2BG1Ge",
                            PhoneNumber = "3456789012",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1f2a3b4c-5d6e-7f8a-9b0c-1d2e3f4a5b6c",
                            TwoFactorEnabled = false,
                            UserName = "supplier"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            CompanyName = "Johnson Elementary School",
                            ConcurrencyStamp = "4c5d6e7f-8a9b-0c1d-2e3f-4a5b6c7d8e9f",
                            Email = "customer@example.com",
                            EmailConfirmed = true,
                            FirstName = "Robert",
                            LastName = "Johnson",
                            LockoutEnabled = true,
                            NormalizedEmail = "CUSTOMER@EXAMPLE.COM",
                            NormalizedUserName = "CUSTOMER",
                            Notes = "Regular customer - monthly orders",
                            PasswordHash = "$2a$12$qg9Dg6MBwphaDdYWImxO7O8pwjz9NWz28r9hGiCWnDLtVa0ynK9W2",
                            PhoneNumber = "4567890123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3b4c5d6e-7f8a-9b0c-1d2e-3f4a5b6c7d8e",
                            TwoFactorEnabled = false,
                            UserName = "customer"
                        },
                        new
                        {
                            Id = "a7f1f87f-8150-4c86-bef3-3b6f5b497c0b",
                            AccessFailedCount = 0,
                            CompanyName = "FastPrint Solutions",
                            ConcurrencyStamp = "bb9bd41a-5582-49d2-be6e-3f576cefbbcb",
                            Email = "support@fastprint.com",
                            EmailConfirmed = true,
                            FirstName = "Daniel",
                            LastName = "Young",
                            LockoutEnabled = true,
                            NormalizedEmail = "SUPPORT@FASTPRINT.COM",
                            NormalizedUserName = "FASTPRINT",
                            Notes = "Printing and stationery supplier",
                            PasswordHash = "$2a$12$pfsAFvDl3XlZxfqBfXoNR.L98a6.83LIqb.pZrZQmB738RCG5Hm5C",
                            PhoneNumber = "3456789006",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "27f0738f-c40d-4766-be53-a6f42defc331",
                            TwoFactorEnabled = false,
                            UserName = "fastprint"
                        },
                        new
                        {
                            Id = "56e2e671-7353-4bce-950b-b76d74915f0f",
                            AccessFailedCount = 0,
                            CompanyName = "AlphaWorks Stationers",
                            ConcurrencyStamp = "1b867235-a6e7-4c6b-8418-e66546026902",
                            Email = "sales@alphaworks.com",
                            EmailConfirmed = true,
                            FirstName = "Emily",
                            LastName = "Stewart",
                            LockoutEnabled = true,
                            NormalizedEmail = "SALES@ALPHAWORKS.COM",
                            NormalizedUserName = "ALPHAWORKS",
                            Notes = "Office supplies distributor",
                            PasswordHash = "$2a$12$pfsAFvDl3XlZxfqBfXoNR.L98a6.83LIqb.pZrZQmB738RCG5Hm5C",
                            PhoneNumber = "3456789007",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "666a4160-19a6-430d-896b-9edd6f61a21c",
                            TwoFactorEnabled = false,
                            UserName = "alphaworks"
                        },
                        new
                        {
                            Id = "5cc99ded-fe07-4bbb-a761-4a6025891f9f",
                            AccessFailedCount = 0,
                            CompanyName = "BrightBooks Inc.",
                            ConcurrencyStamp = "cc8a4155-0a2e-45b9-8cd1-8627269b3ba5",
                            Email = "info@brightbooks.com",
                            EmailConfirmed = true,
                            FirstName = "Jason",
                            LastName = "Lee",
                            LockoutEnabled = true,
                            NormalizedEmail = "INFO@BRIGHTBOOKS.COM",
                            NormalizedUserName = "BRIGHTBOOKS",
                            Notes = "Book and educational materials supplier",
                            PasswordHash = "$2a$12$pfsAFvDl3XlZxfqBfXoNR.L98a6.83LIqb.pZrZQmB738RCG5Hm5C",
                            PhoneNumber = "3456789008",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cc8a4155-0a2e-45b9-8cd1-8627269b3ba5",
                            TwoFactorEnabled = false,
                            UserName = "brightbooks"
                        },
                        new
                        {
                            Id = "2813ffb1-e876-4183-9621-480f02708712",
                            AccessFailedCount = 0,
                            CompanyName = "ColorCopy Ltd.",
                            ConcurrencyStamp = "41b5702a-632f-4524-adc3-622b161713f6",
                            Email = "hello@colorcopy.com",
                            EmailConfirmed = true,
                            FirstName = "Sophia",
                            LastName = "Carter",
                            LockoutEnabled = true,
                            NormalizedEmail = "HELLO@COLORCOPY.COM",
                            NormalizedUserName = "COLORCOPY",
                            Notes = "Printing and copying supplies",
                            PasswordHash = "$2a$12$pfsAFvDl3XlZxfqBfXoNR.L98a6.83LIqb.pZrZQmB738RCG5Hm5C",
                            PhoneNumber = "3456789009",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a439dd21-ceec-4f99-9600-6829b8211f9b",
                            TwoFactorEnabled = false,
                            UserName = "colorcopy"
                        },
                        new
                        {
                            Id = "f542b6c8-24f1-4dbe-8a1c-05866a020016",
                            AccessFailedCount = 0,
                            CompanyName = "NextGen Office Equipment",
                            ConcurrencyStamp = "0b6683fb-059b-47f4-9457-41343c974d95",
                            Email = "contact@nextgenoffice.com",
                            EmailConfirmed = true,
                            FirstName = "Ryan",
                            LastName = "Turner",
                            LockoutEnabled = true,
                            NormalizedEmail = "CONTACT@NEXTGENOFFICE.COM",
                            NormalizedUserName = "NEXTGENOFFICE",
                            Notes = "Office equipment and supplies",
                            PasswordHash = "$2a$12$pfsAFvDl3XlZxfqBfXoNR.L98a6.83LIqb.pZrZQmB738RCG5Hm5C",
                            PhoneNumber = "3456789010",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "016609ef-88be-4c47-be8f-d417310834f0",
                            TwoFactorEnabled = false,
                            UserName = "nextgenoffice"
                        },
                        new
                        {
                            Id = "31f025f2-60a3-4a15-8b3d-5e929e1f12f4",
                            AccessFailedCount = 0,
                            CompanyName = "SmartStationers Co.",
                            ConcurrencyStamp = "9bd94843-af22-4be5-b7c1-0795c89f8c6d",
                            Email = "info@smartstationers.com",
                            EmailConfirmed = true,
                            FirstName = "Hannah",
                            LastName = "King",
                            LockoutEnabled = true,
                            NormalizedEmail = "INFO@SMARTSTATIONERS.COM",
                            NormalizedUserName = "SMARTSTATIONERS",
                            Notes = "Stationery and office supplies",
                            PasswordHash = "$2a$12$pfsAFvDl3XlZxfqBfXoNR.L98a6.83LIqb.pZrZQmB738RCG5Hm5C",
                            PhoneNumber = "3456789011",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "da111342-cb10-48c8-80f2-3370f3468e43",
                            TwoFactorEnabled = false,
                            UserName = "smartstationers"
                        },
                        new
                        {
                            Id = "eba6a85d-944e-42af-b963-1a22b2c66bfc",
                            AccessFailedCount = 0,
                            CompanyName = "Offix Solutions",
                            ConcurrencyStamp = "9cc56f99-01cf-442a-b397-93314ca67483",
                            Email = "support@offixsolutions.com",
                            EmailConfirmed = true,
                            FirstName = "Jacob",
                            LastName = "Moore",
                            LockoutEnabled = true,
                            NormalizedEmail = "SUPPORT@OFFIXSOLUTIONS.COM",
                            NormalizedUserName = "OFFIXSOLUTIONS",
                            Notes = "Office solutions provider",
                            PasswordHash = "$2a$12$pfsAFvDl3XlZxfqBfXoNR.L98a6.83LIqb.pZrZQmB738RCG5Hm5C",
                            PhoneNumber = "3456789012",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d777e1f8-9893-48f4-8d00-93300ba89ad2",
                            TwoFactorEnabled = false,
                            UserName = "offixsolutions"
                        },
                        new
                        {
                            Id = "acef761f-019a-4ca2-982a-d8e7dee767ed",
                            AccessFailedCount = 0,
                            CompanyName = "Primo Educational Supplies",
                            ConcurrencyStamp = "9d9977ed-ea32-4ab2-832b-0b70dd82e5a6",
                            Email = "orders@primoeducational.com",
                            EmailConfirmed = true,
                            FirstName = "Ava",
                            LastName = "White",
                            LockoutEnabled = true,
                            NormalizedEmail = "ORDERS@PRIMOEDUCATIONAL.COM",
                            NormalizedUserName = "PRIMOEDUCATIONAL",
                            Notes = "Educational supplies distributor",
                            PasswordHash = "$2a$12$pfsAFvDl3XlZxfqBfXoNR.L98a6.83LIqb.pZrZQmB738RCG5Hm5C",
                            PhoneNumber = "3456789013",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a56c84c8-2d13-4243-8e53-9cb37ecdf9a8",
                            TwoFactorEnabled = false,
                            UserName = "primoeducational"
                        },
                        new
                        {
                            Id = "e4f938e4-e3fc-4fe3-94d4-4a664de76e0d",
                            AccessFailedCount = 0,
                            CompanyName = "EcoPaper Plus",
                            ConcurrencyStamp = "ef2f7100-d8b9-4e69-a8a3-7a449275eca6",
                            Email = "eco@ecopaperplus.com",
                            EmailConfirmed = true,
                            FirstName = "Mia",
                            LastName = "Hill",
                            LockoutEnabled = true,
                            NormalizedEmail = "ECO@ECOPAPERPLUS.COM",
                            NormalizedUserName = "ECOPAPERPLUS",
                            Notes = "Eco-friendly paper products",
                            PasswordHash = "$2a$12$pfsAFvDl3XlZxfqBfXoNR.L98a6.83LIqb.pZrZQmB738RCG5Hm5C",
                            PhoneNumber = "3456789014",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9bb73ee2-e28f-4711-9042-c9c1c29980d4",
                            TwoFactorEnabled = false,
                            UserName = "ecopaperplus"
                        },
                        new
                        {
                            Id = "fd9249ce-169c-457f-8513-7ada0ac1683b",
                            AccessFailedCount = 0,
                            CompanyName = "EduSmart Stationery",
                            ConcurrencyStamp = "bb9a82b4-064d-4a1c-92b6-3982f074afcb",
                            Email = "hello@edusmart.com",
                            EmailConfirmed = true,
                            FirstName = "Noah",
                            LastName = "Adams",
                            LockoutEnabled = true,
                            NormalizedEmail = "HELLO@EDUSMART.COM",
                            NormalizedUserName = "EDUSMART",
                            Notes = "Educational stationery supplier",
                            PasswordHash = "$2a$12$pfsAFvDl3XlZxfqBfXoNR.L98a6.83LIqb.pZrZQmB738RCG5Hm5C",
                            PhoneNumber = "3456789015",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "be7551f4-6ea9-40cc-b337-1c2c6db91faf",
                            TwoFactorEnabled = false,
                            UserName = "edusmart"
                        },
                        new
                        {
                            Id = "be61d1f3-dfc4-4c60-bbc2-0136ae5cfb5c",
                            AccessFailedCount = 0,
                            CompanyName = "BrightTech Office Supplies",
                            ConcurrencyStamp = "2b963347-0568-4532-ba63-bff4d948f7b0",
                            Email = "sales@brighttech.com",
                            EmailConfirmed = true,
                            FirstName = "William",
                            LastName = "Scott",
                            LockoutEnabled = true,
                            NormalizedEmail = "SALES@BRIGHTTECH.COM",
                            NormalizedUserName = "BRIGHTTECH",
                            Notes = "Office technology and supplies",
                            PasswordHash = "$2a$12$pfsAFvDl3XlZxfqBfXoNR.L98a6.83LIqb.pZrZQmB738RCG5Hm5C",
                            PhoneNumber = "3456789016",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "818c6e97-8d4b-47a6-a61c-6cf55fd61312",
                            TwoFactorEnabled = false,
                            UserName = "brighttech"
                        },
                        new
                        {
                            Id = "64bc2df7-a283-40c6-aa76-cc79d5d2378a",
                            AccessFailedCount = 0,
                            CompanyName = "Prime Papers Corporation",
                            ConcurrencyStamp = "6aab628a-68f4-4e7e-95a3-03c42897f849",
                            Email = "orders@primepapers.com",
                            EmailConfirmed = true,
                            FirstName = "Isabella",
                            LastName = "Green",
                            LockoutEnabled = true,
                            NormalizedEmail = "ORDERS@PRIMEPAPERS.COM",
                            NormalizedUserName = "PRIMEPAPERS",
                            Notes = "Paper products supplier",
                            PasswordHash = "$2a$12$pfsAFvDl3XlZxfqBfXoNR.L98a6.83LIqb.pZrZQmB738RCG5Hm5C",
                            PhoneNumber = "3456789017",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "56358e25-aa23-4266-8a1a-c38a81e799e7",
                            TwoFactorEnabled = false,
                            UserName = "primepapers"
                        },
                        new
                        {
                            Id = "e1615701-0602-4f0b-8815-c486c5e5fde0",
                            AccessFailedCount = 0,
                            CompanyName = "Xpress Stationery Services",
                            ConcurrencyStamp = "a6c7ada1-0576-48f0-a02f-5e6a625da32b",
                            Email = "support@xpressstationery.com",
                            EmailConfirmed = true,
                            FirstName = "James",
                            LastName = "Wright",
                            LockoutEnabled = true,
                            NormalizedEmail = "SUPPORT@XPRESSSTATIONERY.COM",
                            NormalizedUserName = "XPRESSSTATIONERY",
                            Notes = "Fast delivery stationery service",
                            PasswordHash = "$2a$12$pfsAFvDl3XlZxfqBfXoNR.L98a6.83LIqb.pZrZQmB738RCG5Hm5C",
                            PhoneNumber = "3456789018",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e165ed1d-714e-4ebb-b81d-5823294e1934",
                            TwoFactorEnabled = false,
                            UserName = "xpressstationery"
                        },
                        new
                        {
                            Id = "4b33af44-e3f4-449c-becf-76dcc3b0f110",
                            AccessFailedCount = 0,
                            CompanyName = "Global Offices Ltd.",
                            ConcurrencyStamp = "a37c40a4-1e7b-44ad-a4d1-3a76917fd82e",
                            Email = "info@globaloffices.com",
                            EmailConfirmed = true,
                            FirstName = "Charlotte",
                            LastName = "Baker",
                            LockoutEnabled = true,
                            NormalizedEmail = "INFO@GLOBALOFFICES.COM",
                            NormalizedUserName = "GLOBALOFFICES",
                            Notes = "International office supplies",
                            PasswordHash = "$2a$12$pfsAFvDl3XlZxfqBfXoNR.L98a6.83LIqb.pZrZQmB738RCG5Hm5C",
                            PhoneNumber = "3456789019",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "90b34228-cd8a-44fd-8de7-09d18dd05f3e",
                            TwoFactorEnabled = false,
                            UserName = "globaloffices"
                        },
                        new
                        {
                            Id = "dd83701a-3664-44a0-b813-85d5e80532da",
                            AccessFailedCount = 0,
                            CompanyName = "AceOffice Supplies",
                            ConcurrencyStamp = "f56a3acc-f5e2-4dec-9d3c-62b6312f33cd",
                            Email = "sales@aceoffice.com",
                            EmailConfirmed = true,
                            FirstName = "Lucas",
                            LastName = "Mitchell",
                            LockoutEnabled = true,
                            NormalizedEmail = "SALES@ACEOFFICE.COM",
                            NormalizedUserName = "ACEOFFICE",
                            Notes = "Premium office supplies",
                            PasswordHash = "$2a$12$pfsAFvDl3XlZxfqBfXoNR.L98a6.83LIqb.pZrZQmB738RCG5Hm5C",
                            PhoneNumber = "3456789020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "083ec1d5-0395-4aed-86d4-4facf40f7b64",
                            TwoFactorEnabled = false,
                            UserName = "aceoffice"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("backend.Models.PersonalDetails", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("backend.Models.PersonalDetails", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.PersonalDetails", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("backend.Models.PersonalDetails", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
