// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Data;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20250428034334_SeedSupplierUsers")]
    partial class SeedSupplierUsers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        },
                        new
                        {
                            Id = "3",
                            Name = "Supplier",
                            NormalizedName = "SUPPLIER"
                        },
                        new
                        {
                            Id = "4",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "3",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "4",
                            RoleId = "4"
                        },
                        new
                        {
                            UserId = "d8833b71-7bad-478e-8189-d2cbfab8ac5e",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "5317870b-36fd-400c-8657-dbc43b17e5e7",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "32de9075-214f-4a8d-913f-a131168d4853",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "ce488c37-45b6-4d69-8a64-d02fa9a61894",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "a95f66e0-bc8b-402f-a5f5-8fd51a7985d5",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "ecb61b82-b1d4-488f-8736-c3d248378713",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "b1909819-071a-4a5b-aa1f-38b737e0a133",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "b507cdc0-8846-40fe-90ae-dcda5110eeab",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "64512944-ff2b-42ef-bb8f-2ee8e3a79ddb",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "bcd34ec7-52da-44a6-b592-5dd78b38ca9d",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "751d4c9f-e532-430f-abff-8e4e4b6b8a82",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "c23fc550-0896-4d4d-90e9-89ed6cb2e394",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "586f91a5-f77a-4e3e-a5a9-fe042d1ae8bd",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "8a0eaedd-53bc-47b0-bf49-f742e2540e89",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "c8704368-0f52-4aaa-ae0c-e39a164e6e7a",
                            RoleId = "3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("backend.Models.PersonalDetails", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            CompanyName = "Prince Educational Supply",
                            ConcurrencyStamp = "8d5e6f7a-1b2c-3d4e-5f6a-7b8c9d0e1f2a",
                            Email = "admin@prince.edu",
                            EmailConfirmed = true,
                            FirstName = "System",
                            LastName = "Administrator",
                            LockoutEnabled = true,
                            NormalizedEmail = "ADMIN@PRINCE.EDU",
                            NormalizedUserName = "ADMIN",
                            Notes = "System Administrator Account",
                            PasswordHash = "$2a$12$jp5zIIJOL8xuwDJ8iFQ71eCo8SkyYUe.EzycyKo9x8avU63OE./DK",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7c4c8c0a-9b3a-4e5f-9d1c-1a2b3c4d5e6f",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            CompanyName = "Prince Educational Supply",
                            ConcurrencyStamp = "0e1f2a3b-4c5d-6e7f-8a9b-0c1d2e3f4a5b",
                            Email = "employee@prince.edu",
                            EmailConfirmed = true,
                            FirstName = "John",
                            LastName = "Doe",
                            LockoutEnabled = true,
                            NormalizedEmail = "EMPLOYEE@PRINCE.EDU",
                            NormalizedUserName = "EMPLOYEE",
                            Notes = "Inventory Manager",
                            PasswordHash = "$2a$12$ftZOEZ3bCuHwb8sY3q4TK.9842WEhzdptOPQdDGYnfyFt0Wr.Fhbi",
                            PhoneNumber = "2345678901",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9d0e1f2a-3b4c-5d6e-7f8a-9b0c1d2e3f4a",
                            TwoFactorEnabled = false,
                            UserName = "employee"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            CompanyName = "Educational Supplies Inc.",
                            ConcurrencyStamp = "2a3b4c5d-6e7f-8a9b-0c1d-2e3f4a5b6c7d",
                            Email = "supplier@example.com",
                            EmailConfirmed = true,
                            FirstName = "Jane",
                            LastName = "Smith",
                            LockoutEnabled = true,
                            NormalizedEmail = "SUPPLIER@EXAMPLE.COM",
                            NormalizedUserName = "SUPPLIER",
                            Notes = "Main supplier of stationery",
                            PasswordHash = "$2a$12$ycj3WiWbM50s0umHkb3ZmuX9BHbrfhmZm8Ps58grA/E2GdF2BG1Ge",
                            PhoneNumber = "3456789012",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1f2a3b4c-5d6e-7f8a-9b0c-1d2e3f4a5b6c",
                            TwoFactorEnabled = false,
                            UserName = "supplier"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            CompanyName = "Johnson Elementary School",
                            ConcurrencyStamp = "4c5d6e7f-8a9b-0c1d-2e3f-4a5b6c7d8e9f",
                            Email = "customer@example.com",
                            EmailConfirmed = true,
                            FirstName = "Robert",
                            LastName = "Johnson",
                            LockoutEnabled = true,
                            NormalizedEmail = "CUSTOMER@EXAMPLE.COM",
                            NormalizedUserName = "CUSTOMER",
                            Notes = "Regular customer - monthly orders",
                            PasswordHash = "$2a$12$qg9Dg6MBwphaDdYWImxO7O8pwjz9NWz28r9hGiCWnDLtVa0ynK9W2",
                            PhoneNumber = "4567890123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3b4c5d6e-7f8a-9b0c-1d2e-3f4a5b6c7d8e",
                            TwoFactorEnabled = false,
                            UserName = "customer"
                        },
                        new
                        {
                            Id = "d8833b71-7bad-478e-8189-d2cbfab8ac5e",
                            AccessFailedCount = 0,
                            CompanyName = "FastPrint Solutions",
                            ConcurrencyStamp = "23bd17b5-a873-45f5-869e-296b3fb982d7",
                            Email = "support@fastprint.com",
                            EmailConfirmed = true,
                            FirstName = "Daniel",
                            LastName = "Young",
                            LockoutEnabled = true,
                            NormalizedEmail = "SUPPORT@FASTPRINT.COM",
                            NormalizedUserName = "FASTPRINT",
                            Notes = "Printing and stationery supplier",
                            PhoneNumber = "3456789006",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b6dcd800-afd7-4800-914c-9bdb89b20a40",
                            TwoFactorEnabled = false,
                            UserName = "fastprint"
                        },
                        new
                        {
                            Id = "5317870b-36fd-400c-8657-dbc43b17e5e7",
                            AccessFailedCount = 0,
                            CompanyName = "AlphaWorks Stationers",
                            ConcurrencyStamp = "910415f2-6ac4-4114-a762-df9b5ed35aca",
                            Email = "sales@alphaworks.com",
                            EmailConfirmed = true,
                            FirstName = "Emily",
                            LastName = "Stewart",
                            LockoutEnabled = true,
                            NormalizedEmail = "SALES@ALPHAWORKS.COM",
                            NormalizedUserName = "ALPHAWORKS",
                            Notes = "Office supplies distributor",
                            PhoneNumber = "3456789007",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c0b77d40-e130-4c6f-a551-e98a1b933ef8",
                            TwoFactorEnabled = false,
                            UserName = "alphaworks"
                        },
                        new
                        {
                            Id = "32de9075-214f-4a8d-913f-a131168d4853",
                            AccessFailedCount = 0,
                            CompanyName = "BrightBooks Inc.",
                            ConcurrencyStamp = "c8f18374-487c-4c01-856a-c7cba8cce9c2",
                            Email = "info@brightbooks.com",
                            EmailConfirmed = true,
                            FirstName = "Jason",
                            LastName = "Lee",
                            LockoutEnabled = true,
                            NormalizedEmail = "INFO@BRIGHTBOOKS.COM",
                            NormalizedUserName = "BRIGHTBOOKS",
                            Notes = "Book and educational materials supplier",
                            PhoneNumber = "3456789008",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "47fd52f9-0c91-4971-aac8-4a46e98c3728",
                            TwoFactorEnabled = false,
                            UserName = "brightbooks"
                        },
                        new
                        {
                            Id = "ce488c37-45b6-4d69-8a64-d02fa9a61894",
                            AccessFailedCount = 0,
                            CompanyName = "ColorCopy Ltd.",
                            ConcurrencyStamp = "f9e638d8-06a9-494c-b6a7-733f2deb92e8",
                            Email = "hello@colorcopy.com",
                            EmailConfirmed = true,
                            FirstName = "Sophia",
                            LastName = "Carter",
                            LockoutEnabled = true,
                            NormalizedEmail = "HELLO@COLORCOPY.COM",
                            NormalizedUserName = "COLORCOPY",
                            Notes = "Printing and copying supplies",
                            PhoneNumber = "3456789009",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "790282c0-6de7-4551-8010-b4ff51aaef0f",
                            TwoFactorEnabled = false,
                            UserName = "colorcopy"
                        },
                        new
                        {
                            Id = "a95f66e0-bc8b-402f-a5f5-8fd51a7985d5",
                            AccessFailedCount = 0,
                            CompanyName = "NextGen Office Equipment",
                            ConcurrencyStamp = "7d0bc8a1-7d10-45f6-8ebe-aa1a313dae3c",
                            Email = "contact@nextgenoffice.com",
                            EmailConfirmed = true,
                            FirstName = "Ryan",
                            LastName = "Turner",
                            LockoutEnabled = true,
                            NormalizedEmail = "CONTACT@NEXTGENOFFICE.COM",
                            NormalizedUserName = "NEXTGENOFFICE",
                            Notes = "Office equipment and supplies",
                            PhoneNumber = "3456789010",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "151bd860-fd6b-4d8a-ab62-64a8777d4e52",
                            TwoFactorEnabled = false,
                            UserName = "nextgenoffice"
                        },
                        new
                        {
                            Id = "ecb61b82-b1d4-488f-8736-c3d248378713",
                            AccessFailedCount = 0,
                            CompanyName = "SmartStationers Co.",
                            ConcurrencyStamp = "e98a2e1e-bc42-4e99-8552-2c069f58a053",
                            Email = "info@smartstationers.com",
                            EmailConfirmed = true,
                            FirstName = "Hannah",
                            LastName = "King",
                            LockoutEnabled = true,
                            NormalizedEmail = "INFO@SMARTSTATIONERS.COM",
                            NormalizedUserName = "SMARTSTATIONERS",
                            Notes = "Stationery and office supplies",
                            PhoneNumber = "3456789011",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9d93befb-ea58-4d0f-ba52-76ae758f214d",
                            TwoFactorEnabled = false,
                            UserName = "smartstationers"
                        },
                        new
                        {
                            Id = "b1909819-071a-4a5b-aa1f-38b737e0a133",
                            AccessFailedCount = 0,
                            CompanyName = "Offix Solutions",
                            ConcurrencyStamp = "841ddbcd-ecca-461f-88d2-f83bab7b2448",
                            Email = "support@offixsolutions.com",
                            EmailConfirmed = true,
                            FirstName = "Jacob",
                            LastName = "Moore",
                            LockoutEnabled = true,
                            NormalizedEmail = "SUPPORT@OFFIXSOLUTIONS.COM",
                            NormalizedUserName = "OFFIXSOLUTIONS",
                            Notes = "Office solutions provider",
                            PhoneNumber = "3456789012",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d06c2f2b-fa5d-4a1c-a084-2c710186e094",
                            TwoFactorEnabled = false,
                            UserName = "offixsolutions"
                        },
                        new
                        {
                            Id = "b507cdc0-8846-40fe-90ae-dcda5110eeab",
                            AccessFailedCount = 0,
                            CompanyName = "Primo Educational Supplies",
                            ConcurrencyStamp = "48c92c6c-1d8f-4689-b179-3de9569f353f",
                            Email = "orders@primoeducational.com",
                            EmailConfirmed = true,
                            FirstName = "Ava",
                            LastName = "White",
                            LockoutEnabled = true,
                            NormalizedEmail = "ORDERS@PRIMOEDUCATIONAL.COM",
                            NormalizedUserName = "PRIMOEDUCATIONAL",
                            Notes = "Educational supplies distributor",
                            PhoneNumber = "3456789013",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "42a20668-1632-410d-844a-3cccf3d7c9a5",
                            TwoFactorEnabled = false,
                            UserName = "primoeducational"
                        },
                        new
                        {
                            Id = "64512944-ff2b-42ef-bb8f-2ee8e3a79ddb",
                            AccessFailedCount = 0,
                            CompanyName = "EcoPaper Plus",
                            ConcurrencyStamp = "d0963a43-a4a1-4860-803b-77037da9a6d8",
                            Email = "eco@ecopaperplus.com",
                            EmailConfirmed = true,
                            FirstName = "Mia",
                            LastName = "Hill",
                            LockoutEnabled = true,
                            NormalizedEmail = "ECO@ECOPAPERPLUS.COM",
                            NormalizedUserName = "ECOPAPERPLUS",
                            Notes = "Eco-friendly paper products",
                            PhoneNumber = "3456789014",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1ad80928-6f0f-417c-815b-546e5e2d0db5",
                            TwoFactorEnabled = false,
                            UserName = "ecopaperplus"
                        },
                        new
                        {
                            Id = "bcd34ec7-52da-44a6-b592-5dd78b38ca9d",
                            AccessFailedCount = 0,
                            CompanyName = "EduSmart Stationery",
                            ConcurrencyStamp = "a36d5fbf-a32a-41c8-8b7c-729ca9f5b8b0",
                            Email = "hello@edusmart.com",
                            EmailConfirmed = true,
                            FirstName = "Noah",
                            LastName = "Adams",
                            LockoutEnabled = true,
                            NormalizedEmail = "HELLO@EDUSMART.COM",
                            NormalizedUserName = "EDUSMART",
                            Notes = "Educational stationery supplier",
                            PhoneNumber = "3456789015",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3dbde75d-bc3f-473e-861c-fef4838691fb",
                            TwoFactorEnabled = false,
                            UserName = "edusmart"
                        },
                        new
                        {
                            Id = "751d4c9f-e532-430f-abff-8e4e4b6b8a82",
                            AccessFailedCount = 0,
                            CompanyName = "BrightTech Office Supplies",
                            ConcurrencyStamp = "44c2b280-6c85-4936-8791-3c7e3ce0c4c5",
                            Email = "sales@brighttech.com",
                            EmailConfirmed = true,
                            FirstName = "William",
                            LastName = "Scott",
                            LockoutEnabled = true,
                            NormalizedEmail = "SALES@BRIGHTTECH.COM",
                            NormalizedUserName = "BRIGHTTECH",
                            Notes = "Office technology and supplies",
                            PhoneNumber = "3456789016",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1c5ac639-a3af-468a-a83d-b07e16d5c49e",
                            TwoFactorEnabled = false,
                            UserName = "brighttech"
                        },
                        new
                        {
                            Id = "c23fc550-0896-4d4d-90e9-89ed6cb2e394",
                            AccessFailedCount = 0,
                            CompanyName = "Prime Papers Corporation",
                            ConcurrencyStamp = "7a12cf6f-2d76-4c2e-984a-36c9d2876aad",
                            Email = "orders@primepapers.com",
                            EmailConfirmed = true,
                            FirstName = "Isabella",
                            LastName = "Green",
                            LockoutEnabled = true,
                            NormalizedEmail = "ORDERS@PRIMEPAPERS.COM",
                            NormalizedUserName = "PRIMEPAPERS",
                            Notes = "Paper products supplier",
                            PhoneNumber = "3456789017",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c5878810-e386-4330-bed8-539a9936310f",
                            TwoFactorEnabled = false,
                            UserName = "primepapers"
                        },
                        new
                        {
                            Id = "586f91a5-f77a-4e3e-a5a9-fe042d1ae8bd",
                            AccessFailedCount = 0,
                            CompanyName = "Xpress Stationery Services",
                            ConcurrencyStamp = "0c667dc4-2381-4830-ad20-40bcc6884a40",
                            Email = "support@xpressstationery.com",
                            EmailConfirmed = true,
                            FirstName = "James",
                            LastName = "Wright",
                            LockoutEnabled = true,
                            NormalizedEmail = "SUPPORT@XPRESSSTATIONERY.COM",
                            NormalizedUserName = "XPRESSSTATIONERY",
                            Notes = "Fast delivery stationery service",
                            PhoneNumber = "3456789018",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cbaae800-af1d-49b6-9db9-f80a079fa81e",
                            TwoFactorEnabled = false,
                            UserName = "xpressstationery"
                        },
                        new
                        {
                            Id = "8a0eaedd-53bc-47b0-bf49-f742e2540e89",
                            AccessFailedCount = 0,
                            CompanyName = "Global Offices Ltd.",
                            ConcurrencyStamp = "eafb4b35-3e50-46ee-aff3-55e4db396f59",
                            Email = "info@globaloffices.com",
                            EmailConfirmed = true,
                            FirstName = "Charlotte",
                            LastName = "Baker",
                            LockoutEnabled = true,
                            NormalizedEmail = "INFO@GLOBALOFFICES.COM",
                            NormalizedUserName = "GLOBALOFFICES",
                            Notes = "International office supplies",
                            PhoneNumber = "3456789019",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "12271fda-aae7-4872-b250-eb7ecdf359d7",
                            TwoFactorEnabled = false,
                            UserName = "globaloffices"
                        },
                        new
                        {
                            Id = "c8704368-0f52-4aaa-ae0c-e39a164e6e7a",
                            AccessFailedCount = 0,
                            CompanyName = "AceOffice Supplies",
                            ConcurrencyStamp = "15af3825-9e03-44ad-8d24-514cda885914",
                            Email = "sales@aceoffice.com",
                            EmailConfirmed = true,
                            FirstName = "Lucas",
                            LastName = "Mitchell",
                            LockoutEnabled = true,
                            NormalizedEmail = "SALES@ACEOFFICE.COM",
                            NormalizedUserName = "ACEOFFICE",
                            Notes = "Premium office supplies",
                            PhoneNumber = "3456789020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bdd94ba1-6450-4092-86c0-97bb4571b228",
                            TwoFactorEnabled = false,
                            UserName = "aceoffice"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("backend.Models.PersonalDetails", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("backend.Models.PersonalDetails", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.PersonalDetails", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("backend.Models.PersonalDetails", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
